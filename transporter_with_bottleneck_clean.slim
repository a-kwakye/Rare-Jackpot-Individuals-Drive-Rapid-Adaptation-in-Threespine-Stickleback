// transporter_hypothesis.slim
initialize() {
	
	initializeSLiMModelType("WF");
    // initializeTreeSeq();
    defineConstant("NUM_FRESHWATER", 10);
    defineConstant("NE_FW", 1000);
    defineConstant("NE_AN", 10000);
    defineConstant("M_AN_TO_FW", 0.001);
    defineConstant("M_FW_TO_AN", 0.01);
    
    defineConstant("seq_length", 25000000);
    defineConstant("n_mutations", 40);
    defineConstant("n_sample", 0.10);
    defineConstant("add_hap_tick", 2);
    defineConstant("sel_coef_bot", 1.5);
    defineConstant("sel_coef_bot2", 1.5);
    
    defineGlobal("pos_vect", seq(0, seq_length, seq_length/(n_mutations - 1)));
    
    //defineGlobal("pos_vect", asInteger(seq(0, 1, 1.0/(n_mutations - 1))^1.5 * seq_length));

   // print(pos_vect);
    
	// dfe_vect = c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01);
  // dfe_vect = c(0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001);
    
	
    for (i in 0:(n_mutations - 1)){
		// print(i);
		initializeMutationType("m" + (i+1), 1, "f", 0.01);
	}
	
    initializeMutationRate(0);
    initializeMutationType("m0", 1, "f", 0.001);  
    initializeGenomicElementType("g1", c(m0), c(1.0));
    initializeGenomicElement(g1, 0, seq_length);
    initializeRecombinationRate(1e-6);
    
    
}

1 early() {
    sim.addSubpop("p0", NE_AN);  // Anadromous
    for (i in 1:NUM_FRESHWATER) {
        sim.addSubpop("p" + i, NE_FW);  // Freshwater
    }
    
   for (i in 0:(n_mutations - 1)){
		community.allMutationTypes[i].convertToSubstitution = F;	}
		
}



1 late() {
    an_pop = sim.subpopulations[0];  // p0
    for (i in 1:NUM_FRESHWATER) {
        fw_pop = sim.subpopulations[i];  // p1 to p10
        an_pop.setMigrationRates(fw_pop, M_AN_TO_FW);  // anadromous → freshwater
        fw_pop.setMigrationRates(an_pop, M_FW_TO_AN);  // freshwater → anadromous
    }
}

add_hap_tick late() {
	target = sample(p1.haplosomes, asInteger(n_sample * NE_FW * 2));
	for (i in 0:(n_mutations - 1)){
		target.addNewDrawnMutation(community.allMutationTypes[i], asInteger(pos_vect[i]));
	}
}

//target_subpop = sample(sim.subpopulations, 1);

//print(community.allMutationTypes);
//mutationEffect(c(community.allMutationTypes), p0) { return 1/effect;}
mutationEffect(m1, p0) { return 1.0 / effect; }
mutationEffect(m2, p0) { return 1.0 / effect; }
mutationEffect(m3, p0) { return 1.0 / effect; }
mutationEffect(m4, p0) { return 1.0 / effect; }
mutationEffect(m5, p0) { return 1.0 / effect; }
mutationEffect(m6, p0) { return 1.0 / effect; }
mutationEffect(m7, p0) { return 1.0 / effect; }
mutationEffect(m8, p0) { return 1.0 / effect; }
mutationEffect(m9, p0) { return 1.0 / effect; }
mutationEffect(m10, p0) { return 1.0 / effect; }
mutationEffect(m11, p0) { return 1.0 / effect; }
mutationEffect(m12, p0) { return 1.0 / effect; }
mutationEffect(m13, p0) { return 1.0 / effect; }
mutationEffect(m14, p0) { return 1.0 / effect; }
mutationEffect(m15, p0) { return 1.0 / effect; }
mutationEffect(m16, p0) { return 1.0 / effect; }
mutationEffect(m17, p0) { return 1.0 / effect; }
mutationEffect(m18, p0) { return 1.0 / effect; }
mutationEffect(m19, p0) { return 1.0 / effect; }
mutationEffect(m20, p0) { return 1.0 / effect; }
mutationEffect(m21, p0) { return 1.0 / effect; }
mutationEffect(m22, p0) { return 1.0 / effect; }
mutationEffect(m23, p0) { return 1.0 / effect; }
mutationEffect(m24, p0) { return 1.0 / effect; }
mutationEffect(m25, p0) { return 1.0 / effect; }
mutationEffect(m26, p0) { return 1.0 / effect; }
mutationEffect(m27, p0) { return 1.0 / effect; }
mutationEffect(m28, p0) { return 1.0 / effect; }
mutationEffect(m29, p0) { return 1.0 / effect; }
mutationEffect(m30, p0) { return 1.0 / effect; }
mutationEffect(m31, p0) { return 1.0 / effect; }
mutationEffect(m32, p0) { return 1.0 / effect; }
mutationEffect(m33, p0) { return 1.0 / effect; }
mutationEffect(m34, p0) { return 1.0 / effect; }
mutationEffect(m35, p0) { return 1.0 / effect; }
mutationEffect(m36, p0) { return 1.0 / effect; }
mutationEffect(m37, p0) { return 1.0 / effect; }
mutationEffect(m38, p0) { return 1.0 / effect; }
mutationEffect(m39, p0) { return 1.0 / effect; }
mutationEffect(m40, p0) { return 1.0 / effect; }





//mutationEffect((community.allMutationTypes), c(p0)) { return 1/effect; }

//1024 late() { inds = p0.sampleIndividuals(96);
//inds.outputIndividuals(filePath= "/Users/alexk/Desktop/SLIM_simulations/sample_p0_1024_late.txt");}


1024 late() {sample1 = p0.sampleIndividuals(96).haplosomes;
sample1.outputHaplosomes(filePath="/Users/alexk/Desktop/SLIM_simulations/output_p0_1024_late.txt");}


//1024 early() { p0.outputVCFSample(96, filePath="/Users/alexk/Desktop/SLIM_simulations/output_p0_1024_early.vcf");}

1024 late() {sample1 = p12.sampleIndividuals(96).haplosomes;
sample1.outputHaplosomes(filePath="/Users/alexk/Desktop/SLIM_simulations/output_p12_1024_late.txt");}



//1025 late() {sample1 = p0.sampleIndividuals(96).haplosomes;
//sample1.outputHaplosomes(filePath="/Users/alexk/Desktop/SLIM_simulations/output_p0_1025_late.txt");}

1025 late() {sample1 = p12.sampleIndividuals(96).haplosomes;
sample1.outputHaplosomes(filePath="/Users/alexk/Desktop/SLIM_simulations/output_p12_1025_late.txt");}


//fitnessEffect() {
//phenotype = individual.countOfMutationsOfType(m2);
//return 1.5 - (phenotype - 10.0)^2 * 0.005;


//1026 early() {
//    p12.setSubpopulationSize(100);
//}

1024 early() {sim.addSubpopSplit("p12",1000,p0);}



1025 late() {  p12.setSubpopulationSize(100);} // bottleneeeck


1024:1050 fitnessEffect() {    // change the fitness of individuals to make only jackpot carriers survive
    if (individual.subpopulation == p12) {
        // Collect all mutations from both haplotypes
        muts = individual.haplosomes.mutations;
        
        // Count unique mutations
        mutCount = size(muts);
        print(1.0 + 0.05 * mutCount);
        // Fitness depends on number of mutations
        if (mutCount < 8 ) {
        		// individual.tag == 1;
        		//print(individual.subpopulation);
            return 0.0 + 0.05 * mutCount;
        } else {
        		
            return 1.0 + 0.05 * mutCount;
        }
    } else {
        // No fitness effect in other subpopulations
        return 1.0;
    }
}

1026:1050 early() { // after bottleneck, an exponential growth. 
if (p12.individualCount < 1000)
{newSize = asInteger(round(1.15^(sim.cycle - 999) * 100));
p12.setSubpopulationSize(newSize);
	}
}


1026:1050 mutationEffect(m0, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m1, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m2, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m3, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m4, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m5, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m6, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m7, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m8, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m9, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m10, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m11, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m12, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m13, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m14, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m15, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m16, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m17, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m18, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m19, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m20, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m21, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m22, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m23, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m24, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m25, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m26, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m27, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m28, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m29, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m30, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m31, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m32, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m33, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m34, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m35, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m36, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m37, p12) { return sel_coef_bot2; }
1026:1050 mutationEffect(m38, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m39, p12) { return sel_coef_bot; }
1026:1050 mutationEffect(m40, p12) { return sel_coef_bot; }



//1026:1032 late() {
//    survivors = p12.individuals[p12.individuals.tag == 1];
//    cat("Not survivors with mutations: " + survivors.size());
    
//}





//1024 late() { p12.outputSample(96); }

1026 early() {sample1 = p12.sampleIndividuals(96).haplosomes;
sample1.outputHaplosomes(filePath="/Users/alexk/Desktop/SLIM_simulations/output_p12_1026_early.txt");}

1026 late() {sample1 = p12.sampleIndividuals(96).haplosomes;
sample1.outputHaplosomes(filePath="/Users/alexk/Desktop/SLIM_simulations/output_p12_1026_late.txt");}

1027 late() {sample1 = p12.sampleIndividuals(96).haplosomes;
sample1.outputHaplosomes(filePath="/Users/alexk/Desktop/SLIM_simulations/output_p12_1027_late.txt");}

1028 late() {sample1 = p12.sampleIndividuals(96).haplosomes;
sample1.outputHaplosomes(filePath="/Users/alexk/Desktop/SLIM_simulations/output_p12_1028_late.txt");}


1029 late() {sample1 = p12.sampleIndividuals(96).haplosomes;
sample1.outputHaplosomes(filePath="/Users/alexk/Desktop/SLIM_simulations/output_p12_1029_late.txt");}


1030 late() {sample1 = p12.sampleIndividuals(96).haplosomes;
sample1.outputHaplosomes(filePath="/Users/alexk/Desktop/SLIM_simulations/output_p12_1030_late.txt");}


1050 late() {sample1 = p12.sampleIndividuals(96).haplosomes;
sample1.outputHaplosomes(filePath="/Users/alexk/Desktop/SLIM_simulations/output_p12_1050_late.txt");}




1055 late() {
   
    sim.simulationFinished();
}
